{"version":3,"sources":["components/header.jsx","components/loadingBox.jsx","components/navBar.jsx","components/swipeOption.js","components/optionArrows.jsx","components/optionButton.jsx","components/platformOptions.jsx","components/dataFields.js","components/optionForm.jsx","components/footer.jsx","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","React","Component","loadingBox","this","props","ready","NavBar","state","currentPlatform","transitioning","platform","startTransition","setState","platformClicked","document","querySelector","classList","add","setTimeout","remove","buttons","platforms","forEach","push","key","sku","onClick","signalPlatform","nome","swipeOption","direction","swipeAmount","window","innerWidth","leftButton","rightButton","options","Array","from","querySelectorAll","selectedIndex","selectedOption","indexOf","length","edge","num","option","index","style","transform","toString","OptionArrows","optionAmount","OptionButton","optionClicked","doneOptions","includes","signalOption","PlatformOptions","hiddenItems","transferOptionSignal","item","subItems","Object","getOwnPropertyNames","prop","console","log","get","optionItems","Map","optionElements","ativo","itemArray","evalOptionItem","set","split","platformDescription","descricao","map","line","rightArrow","leftArrow","resetArrows","CSSTransition","in","appear","timeout","classNames","dataFields","OptionForm","data","formClosed","dataElements","field","name","type","onInput","ev","fieldProps","target","content","value","validChars","match","slice","maxSize","validateField","closeForm","valid","invalidFields","values","previousElementSibling","textContent","trim","validValue","form","assign","validateForm","Footer","Main","platformsReady","currentOption","allOptions","renderPlatformOptions","renderOptionForm","success","fetch","method","then","response","json","plataformas","getOptions","planos","getPlatforms","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.29d59d20.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header className='app-header'>\r\n        <img src={'./logo.png'} className='app-logo' alt='Logotipo' />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","\r\nimport React from 'react';\r\n\r\nclass loadingBox extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={'loading-box'\r\n          + (this.props.ready\r\n            ? ' loading--done'\r\n            : '')}>\r\n        <h1>\r\n          Aguarde, estamos carregando as plataformas\r\n        </h1>\r\n        <div className='loading-box__dots'>\r\n          <span>.</span>\r\n          <span>.</span>\r\n          <span>.</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default loadingBox;","\r\nimport React from 'react';\r\n\r\nclass NavBar extends React.Component {\r\n  state = {\r\n    currentPlatform: null\r\n  }\r\n\r\n  transitioning = false;\r\n\r\n  // Tell Main that a platform was clicked,\r\n  // so that the PlatformOptions are updated\r\n  signalPlatform(platform) {\r\n    if ((this.state.currentPlatform !== platform) && (!this.transitioning)) {\r\n      this.startTransition();\r\n      this.setState({\r\n        currentPlatform: platform\r\n      });\r\n      this.props.platformClicked(platform);\r\n    }\r\n  }\r\n\r\n  // Trigger transition between platforms\r\n  startTransition() {\r\n    // (not when one is selected for the first time)\r\n    if (document.querySelector('.platform-options')) {\r\n      document.querySelector('.platform-navbar').classList.add('platform--active');\r\n      this.transitioning = true;\r\n\r\n      setTimeout(() => {\r\n        document.querySelector('.platform-navbar').classList.remove('platform--active');\r\n        this.transitioning = false;\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // For each platform fetched, render\r\n    // a button with the platform's name.\r\n    var buttons = [];\r\n    this.props.platforms.forEach((platform) => {\r\n      buttons.push(\r\n        <div\r\n          className={'platform-navbar__button'\r\n            + (platform === this.state.currentPlatform\r\n              ? ' platform--active'\r\n              : '')}\r\n          key={platform.sku}\r\n          onClick={() => {\r\n            this.signalPlatform(platform);\r\n          }}>\r\n          {platform.nome}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <nav className='platform-navbar'>\r\n        {buttons}\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;","// For the swiping, vanilla JS+CSS is faster, easier to write and easier to read.\r\n// Re-rendering the options would be worse for performance and readability\r\n\r\nfunction swipeOption(direction) {\r\n  // Works together with the media queries for small devices\r\n  const swipeAmount =\r\n    'translateX(calc((100% + '\r\n    + (window.innerWidth <= 320\r\n      ? '20px'\r\n      : '40px')\r\n    + ') * ';\r\n    \r\n  const selectClass = 'option-selected';\r\n\r\n  var leftButton = document.querySelector('.platform-options__swipe-left');\r\n  var rightButton = document.querySelector('.platform-options__swipe-right');\r\n\r\n  // Get the current options. Check which is selected (if none, defaults to 0 - first option)\r\n  var options = Array.from(document.querySelectorAll('.platform-options .option'));\r\n  var selectedIndex = 0;\r\n\r\n  var selectedOption = document.querySelector('.platform-options .option.' + selectClass);\r\n\r\n  if (selectedOption) {\r\n    selectedIndex = options.indexOf(selectedOption);\r\n    selectedOption.classList.remove(selectClass);\r\n  }\r\n\r\n  // Update the index\r\n  selectedIndex += (direction === 'right' ? 1 : -1);\r\n\r\n  // Update the swipe buttons\r\n  [\r\n    [rightButton, options.length - 1],\r\n    [leftButton, 0]\r\n  ].forEach(([edge, num]) => {\r\n    if (selectedIndex === num)\r\n      edge.classList.add('swipe--hidden');\r\n    else\r\n      edge.classList.remove('swipe--hidden');\r\n  });\r\n\r\n  // Update the style for each option\r\n  options.forEach((option, index) => {\r\n    if (index === selectedIndex) {\r\n      option.classList.add(selectClass);\r\n    }\r\n\r\n    option.style.transform =\r\n      swipeAmount\r\n      + (selectedIndex * -1).toString()\r\n      + '))';\r\n  })\r\n}\r\n\r\nexport default swipeOption;","\r\nimport React from 'react';\r\n\r\nimport swipeOption from './swipeOption.js';\r\n\r\nfunction resetArrows() {\r\n  var rightArrow = document.querySelector('.platform-options__swipe-right');\r\n  if (rightArrow) rightArrow.classList.remove('swipe--hidden');\r\n  var leftArrow = document.querySelector('.platform-options__swipe-left');\r\n  if (leftArrow) leftArrow.classList.add('swipe--hidden');\r\n}\r\n\r\nclass OptionArrows extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className='platform-options__swipe-buttons'>\r\n        {/* Swipe left - always starts hidden, since the first option is selected */}\r\n        <div\r\n          className='platform-options__swipe-left swipe--hidden'\r\n          onClick={() => { swipeOption('left') }}>\r\n          &lsaquo;\r\n        </div>\r\n        {/* Swipe right - also starts hidden if there is only one option */}\r\n        <div\r\n          className={'platform-options__swipe-right'\r\n            + (this.props.optionAmount <= 1\r\n              ? ' swipe--hidden'\r\n              : '')}\r\n          onClick={() => { swipeOption('right') }}>\r\n          &rsaquo;\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { OptionArrows, resetArrows };","\r\nimport React from 'react';\r\n\r\nclass OptionButton extends React.Component {\r\n  // Signal the platform options that one was chosen\r\n  signalOption() {\r\n    this.props.optionClicked(this.props.option);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.doneOptions.includes(this.props.option)) {\r\n      return (\r\n        <button className='option__button option--done'>\r\n          <div>Plano contratado com sucesso!</div>\r\n        </button>\r\n      );\r\n    }\r\n    else return (\r\n      <button className='option__button' onClick={() => {\r\n        this.signalOption();\r\n      }}>\r\n        <div>Quero esse plano!</div>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OptionButton;","\r\nimport React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport { OptionArrows, resetArrows } from './optionArrows';\r\nimport OptionButton from './optionButton';\r\n\r\nclass PlatformOptions extends React.Component {\r\n\r\n  // Internal option items that are not rendered\r\n  hiddenItems = [\r\n    'sku',\r\n    'ativo'\r\n  ];\r\n\r\n  // Items that are not simple strings are evaluated here\r\n  evalOptionItem(item) {\r\n    if (typeof item == 'object') {\r\n      var subItems = [];\r\n\r\n      Object.getOwnPropertyNames(item).forEach((prop) => {\r\n        if ((prop === 'valorParcela') && (item[prop] === false)) return;\r\n        subItems.push(\r\n          <li key={prop}>\r\n            <span className=\"subitem__name\">\r\n              {prop}:\r\n            </span>\r\n            <span className=\"subitem__value\">\r\n              {' ' + item[prop].toString()}\r\n            </span>\r\n          </li>\r\n        );\r\n      });\r\n\r\n      return (\r\n        <ul>\r\n          {subItems}\r\n        </ul>\r\n      );\r\n    }\r\n\r\n    console.log('ERROR: evaluated unknown item ', item);\r\n\r\n    return 'UNKNOWN ITEM';\r\n  }\r\n\r\n  // When an option is selected, tell Main to render it\r\n  transferOptionSignal = (option) => {\r\n    this.props.optionClicked(option);\r\n  }\r\n\r\n  render() {\r\n    var platform = this.props.platform;\r\n\r\n    if (!platform) return null;\r\n\r\n    // Get the options for the current platform\r\n    var options = this.props.options.get(platform.sku);\r\n\r\n    // Bind each option to its items by its SKU\r\n    var optionItems = new Map();\r\n\r\n    // Create the elements for each option\r\n    var optionElements = [];\r\n\r\n    // Bind each option to its items by its SKU\r\n    options.forEach((option) => {\r\n\r\n      if (option.ativo === false) return;\r\n\r\n      var itemArray = [];\r\n\r\n      // Add each item present in the option\r\n      Object.getOwnPropertyNames(option).forEach((prop) => {\r\n        if (this.hiddenItems.includes(prop)) return;\r\n        itemArray.push(\r\n          <div className='option__item' key={prop}>\r\n            <span className=\"item__name\">\r\n              {prop}:\r\n            </span>\r\n            {/* Strings are added in, objects are evaluated */}\r\n            <span className=\"item__value\">\r\n              {(typeof option[prop] == 'string' ?\r\n                ' ' + option[prop].toString() :\r\n                this.evalOptionItem(option[prop])\r\n              )}\r\n            </span>\r\n          </div>\r\n        );\r\n      });\r\n\r\n      optionItems.set(\r\n        option.sku,\r\n        itemArray\r\n      );\r\n\r\n      optionElements.push(\r\n        <div className='option' key={option.sku}>\r\n          <h2>\r\n            {option.sku.split('_')[0]}\r\n          </h2>\r\n          {optionItems.get(option.sku)}\r\n          <OptionButton\r\n            option={option}\r\n            optionClicked={this.transferOptionSignal}\r\n            doneOptions={this.props.doneOptions}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    // Break down the platform description if it has more than one line\r\n    var platformDescription = platform.descricao.split('|').map((line, index) => {\r\n      return (\r\n        <div key={index}>\r\n          {line}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    // Reset the left/right swipe arrows before rendering\r\n    resetArrows();\r\n\r\n    // Render the current platform's options\r\n    return (\r\n      <CSSTransition in={true} appear={true} timeout={100} classNames='platform-options-transition'>\r\n        <section className='platform-options'>\r\n          <h1>\r\n            {platformDescription}\r\n          </h1>\r\n          <div className='platform-options__container'>\r\n            {optionElements}\r\n          </div>\r\n          <OptionArrows optionAmount={optionElements.length} />\r\n        </section>\r\n      </CSSTransition >\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlatformOptions;","\r\n\r\nconst dataFields = [\r\n  /*\r\n  {\r\n    'name': field name as it will be rendered\r\n    'type': input type (text, date...)\r\n    'maxSize': maximum amount of characters\r\n    'validChars': characters that can be typed\r\n    'validValue': expression that must be matched to submit the form\r\n  },\r\n  */\r\n  {\r\n    'name': 'Nome:',\r\n    'type': 'text',\r\n  },\r\n  {\r\n    'name': 'Email:',\r\n    'type': 'email',\r\n    'validValue': /.+@.+\\../\r\n  },\r\n  {\r\n    'name': 'Data de nascimento:',\r\n    'type': 'date',\r\n  },\r\n  {\r\n    'name': 'CPF:',\r\n    'type': 'text',\r\n    'maxSize': '11',\r\n    'validChars': /[0-9]/,\r\n    'validValue': /[0-9]{11}/\r\n  },\r\n  {\r\n    'name': 'Telefone:',\r\n    'type': 'text',\r\n    'maxSize': '11',\r\n    'validChars': /[0-9]/,\r\n    'validValue': /[0-9]{8,}/\r\n  },\r\n];\r\n\r\n// When the user submits the form, check if the fields are valid\r\nfunction validateForm() {\r\n  var invalidFields = [];\r\n  var values = [];\r\n\r\n  document.querySelectorAll('.form__field input').forEach((field, index) => {\r\n    field.classList.remove('valid');\r\n    field.classList.remove('invalid');\r\n    var name = field.previousElementSibling.textContent.trim();\r\n    if (name[name.length - 1] === ':') name = name.slice(0, -1);\r\n    values.push({});\r\n    values[index][name] = field.value;\r\n\r\n    if (\r\n      (values[index][name].trim() === '')\r\n      || ((dataFields[index].validValue)\r\n        && (!values[index][name].match(dataFields[index].validValue)))\r\n    ) {\r\n      invalidFields.push(field);\r\n    }\r\n\r\n    else field.classList.add('valid');\r\n  });\r\n\r\n  // One or more fields are invalid\r\n  if (invalidFields.length) {\r\n    invalidFields.forEach((field) => {\r\n      field.classList.add('invalid');\r\n    })\r\n    return false;\r\n  }\r\n\r\n  // All fields are valid, get the input data.\r\n  else {\r\n    var form = document.querySelector('.option__form-box');\r\n\r\n    form.classList.add('form--success');\r\n\r\n    setTimeout(() => {\r\n      form.classList.add('success-fade');\r\n      setTimeout(() => {\r\n        form.classList.remove('form--success');\r\n        form.classList.remove('success-fade');\r\n      }, 400);\r\n    }, 1200);\r\n    \r\n    var data = {};\r\n    Object.assign(data, ...values);\r\n    return data;\r\n  }\r\n\r\n}\r\n\r\n// When the user types in a character, check if it's valid\r\nfunction validateField(ev, fieldProps) {\r\n  var field = ev.target;\r\n  var content = field.value;\r\n\r\n  if (fieldProps.validChars && content.length > 0) {\r\n    if (!content[content.length - 1].match(fieldProps.validChars)) {\r\n      field.value = content.slice(0, -1);\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (\r\n    (fieldProps.maxSize && content.length > fieldProps.maxSize)\r\n  ) {\r\n    field.value = content.slice(0, -1);\r\n  }\r\n}\r\n\r\nexport { dataFields, validateField, validateForm };","\r\nimport React from 'react';\r\n\r\nimport { dataFields, validateForm, validateField } from './dataFields';\r\n\r\nclass OptionForm extends React.Component {\r\n\r\n  closeForm(data = false) {\r\n    // 'Close form' button\r\n    if (!data) {\r\n      document.querySelector('.option__form').classList.add('fade-out');\r\n      setTimeout(() => {\r\n        this.props.formClosed(null);\r\n      }, 350);\r\n    }\r\n\r\n    // Form was submitted and validated\r\n    else {\r\n      setTimeout(() => {\r\n        document.querySelector('.option__form').classList.add('fade-out');\r\n        setTimeout(() => {\r\n          this.props.formClosed(null, 'success');\r\n        }, 350);\r\n      }, 1600);\r\n\r\n      console.log(\r\n        '--------',\r\n        '\\n\\n',\r\n        'Plano contratado!',\r\n        '\\n\\n',\r\n        'Dados da plataforma:',\r\n        this.props.platform,\r\n        '\\n\\n',\r\n        'Dados do plano:',\r\n        this.props.option,\r\n        '\\n\\n',\r\n        'Dados do usuário:',\r\n        data,\r\n        '\\n\\n',\r\n        '--------',\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    var option = this.props.option;\r\n    if (!option) return null;\r\n\r\n    var dataElements = [];\r\n\r\n    dataFields.forEach((field, index) => {\r\n      dataElements.push(\r\n        <div className=\"form__field\" key={index}>\r\n          <div>\r\n            {field.name}\r\n          </div>\r\n          <input type={field.type} onInput={(ev) => { validateField(ev, field); }} />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"option__form\">\r\n        <div className=\"option__form-box\">\r\n          <h2>\r\n            Assinar o plano {option.sku.split('_')[0]}\r\n          </h2>\r\n          <h3>\r\n            Preencha os dados abaixo para prosseguir:\r\n        </h3>\r\n          {dataElements}\r\n          <div className=\"form__buttons\">\r\n            <div className=\"form__button-close\" onClick={() => { this.closeForm(); }}>\r\n              Retornar\r\n          </div>\r\n            <div className=\"form__button-submit\" onClick={() => {\r\n              var valid = validateForm();\r\n              if (valid) this.closeForm(valid);\r\n            }}>\r\n              Enviar dados\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OptionForm;","import React from 'react';\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <footer className='app-footer'>\r\n        \r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\n// Header with logo\r\nimport Header from './header';\r\n\r\n// 'Loading' box\r\nimport LoadingBox from './loadingBox';\r\n\r\n// Platform navigation bar\r\nimport NavBar from './navBar';\r\n\r\n// Platform options section\r\nimport PlatformOptions from './platformOptions';\r\n\r\n// Form shown when selecting an option\r\nimport OptionForm from './optionForm';\r\n\r\n// Footer\r\nimport Footer from './footer';\r\n\r\nconst platformURL = 'http://private-59658d-celulardireto2017.apiary-mock.com/plataformas';\r\nconst optionsURL = 'http://private-59658d-celulardireto2017.apiary-mock.com/planos/';\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    platformsReady: false,\r\n    platforms: null,\r\n    currentPlatform: null,\r\n    currentOption: null,\r\n  }\r\n\r\n  allOptions = new Map();\r\n  doneOptions = [];\r\n\r\n  // Fetch data for the platforms: called when the app first renders.\r\n  getPlatforms() {\r\n    window.fetch(platformURL, { method: 'GET' })\r\n      .then((response) => {\r\n        return response.json()\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          platformsReady: true\r\n        });\r\n        // 300ms for the 'loading' screen to fade out\r\n        setTimeout(() => {\r\n          this.setState({\r\n            platforms: data.plataformas\r\n          });\r\n        }, 300);\r\n\r\n        this.getOptions(data.plataformas);\r\n      });\r\n  }\r\n\r\n  // Fetch the options for each platform: called after fetching the platforms\r\n  getOptions(platforms) {\r\n    platforms.forEach((platform) => {\r\n      window.fetch(optionsURL + platform.sku, { method: 'GET' })\r\n        .then((response) => {\r\n          return response.json()\r\n        })\r\n        // Bind each platform to its options by its SKU\r\n        .then((data) => {\r\n          this.allOptions.set(\r\n            platform.sku,\r\n            data.planos\r\n          );\r\n        });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPlatforms();\r\n  }\r\n\r\n  // When a platform is selected, render its options.\r\n  renderPlatformOptions = (platform) => {\r\n    this.setState({\r\n      currentPlatform: platform\r\n    });\r\n  }\r\n\r\n  // When an option is selected, render its form.\r\n  renderOptionForm = (option, success = false) => {\r\n    // When a form is validated, update the option's button.\r\n    if (success) {\r\n      this.doneOptions.push(this.state.currentOption);\r\n    }\r\n\r\n    this.setState({\r\n      currentOption: option\r\n    });\r\n  }\r\n\r\n  // Main app structure\r\n  render() {\r\n    // Display a 'loading' page while the platforms are being loaded\r\n    if (!this.state.platforms) {\r\n      return (\r\n        <div className='app'>\r\n          <Header />\r\n          <LoadingBox ready={this.state.platformsReady} />\r\n          <Footer />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Display the full page after the platforms have been loaded\r\n    else {\r\n      return (\r\n        <div className='app'>\r\n          <Header />\r\n\r\n          {/* NavBar: rendered from the platforms fetched */}\r\n          <NavBar\r\n            platforms={this.state.platforms}\r\n            platformClicked={this.renderPlatformOptions}\r\n          />\r\n\r\n          {/* PlatformOptions: rendered when a platform is selected in NavBar */}\r\n          <PlatformOptions\r\n            options={this.allOptions}\r\n            platform={this.state.currentPlatform}\r\n            optionClicked={this.renderOptionForm}\r\n            doneOptions={this.doneOptions}\r\n          />\r\n\r\n          {/* PlatformOptions: rendered when an option is selected in PlatformOptions */}\r\n          <OptionForm\r\n            option={this.state.currentOption}\r\n            platform={this.state.currentPlatform}\r\n            formClosed={this.renderOptionForm}\r\n          />\r\n\r\n          <Footer />\r\n        </div >\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Main;","// Core imports\nimport React from 'react';\nimport './App.scss';\n\n// App container\nimport Main from './components/main';\n\n// App rendering\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}